* use_R_strictly

  R is easy to use at first. I use it a lot, but begin to hate it a
  little bit when I use Python. The reason is simple: it's not precise
  from a programmer view.
  - The error information often points to the wrong places and not
    helpfull at all. =traceback()= helps sometimes, but still not enough.
  - When I use =library("some package")=, the function names will
    pollute the whole namespace. When reading the codes, it's really
    hard to know where this function comes from at a first glance.
    I indeed miss the =import= in Python, which is simple but precise.
  - It lacks of a simple module system. When I write some utilities in
    a script, I can only use =source("the name of the script")= to add
    it to another script, which again pollute the namespace in my
    current workspace.

  But R indeed has lots of great features I love:
  - The data structures: list, data.frame, matrix, vector, factor and
    so on. They are just easy to use, and supporved by lots of usefull
    functions. Pandas in python is good but not that good as the data
    structures in R.
  - R graphic tools!
  - Writing R packages is easy and the generated document is great!
  - Lots of professional statistical packages.
  

  In this repository, I will summarize my experience on using R
  strictly.

** Use conda to control the virtual enviroment in R.

   Conda is widely used to control vitural enviroment in Python. But
   it's actually a general package management and vitural enviroment
   tool. It works in R, though seems to be a little slow when
   configuring the R related dependencies.

   - Add R related conda channels
#+BEGIN_SRC R
## Like a stack, the channels will be search in order of conda-forge,
## biconda, then defaults.
conda config --add channels defaults
conda config --add channels bioconda
conda config --add channels conda-forge
#+END_SRC

   - Create a virtual enviorment in R
     =conda create -n name_of_env r-base r-essentials=

   - Most of the popular packages can be installed directly by conda
     [RECOMMEND]. But we can use R to install packages. Just to know
     that, R will search the packages with R installed or some where
     you define with =R_LIBS_USER= then the conda's.

   - REF: the [[https://community.rstudio.com/t/why-not-r-via-conda/9438][document]] helps me a lot.

** Use the package box as a module system in R.
A module system is to help us to control our namespace. It helps us to
name the variables easilily without mixing them from other
libariries. More importantly, it makes the code much easier to
read.
   
- [[https://github.com/klmr/box][box]] is is a module system in R, which is just like the one in
  Python. Previously it's named as klmr/modules, and is not updated
  now. The author upgrade the framework, and now box is is the one we
  need.

** Writing R packages
It's easy to write R packages. The book [[https://adv-r.hadley.nz][R Packages]] by Hdley Wickham is
the only book in need. It's short and provides lots of practical
tools. Chapter 2 is enough to start to write a package, and then read
other chapters when necessary.

- [[https://github.com/r-lib/devtools][devtools]] is the tool I use to organize R packages. One important
  function is =devtools::load_all()=, which is key to debug our
  packages. See Chapter 5 in the book above.

** Debug R
- When you have errors, use =traceback()= to view more information
  about them.
- Add =print= related sentences, which is common and easy to
  use. Simple logs help a lot
- =debug([your_function])=. I use this a lot since we can go to the
  details of how the commands run by investigating each command, and
  the current generated/updated variables in the debugging
  envioroment. This is provided by R, and much like =pdb= in Python or
  =gdb= in C/C++. See [[https://adv-r.hadley.nz/debugging.html][Chapter 22 Debugging]] in  [[https://adv-r.hadley.nz][Advanced R]] by Hadley
  Wickham for the details.

** Tips
- Use LESS =library= to load packages, instead use =package::function=
  to declare explictly which function in use.
  - =library= will load the package, but make our current global
    enviroment dirty with the names from that package. See
    [[https://adv-r.hadley.nz/environments.html#special-environments][Special Env]] for more details.

- NOT use dot when naming variables, such as =data.i=. Perfer underline
  instead.
  - It's legal to 
    name variables like this in R unlike other languages. But this may
    confuse people since it usually means you want to get an attribute
    named /i/ in the variable =data= for most of the languges
    besides R, and also R's generics functions use dot to find the real
    functions. 
** Other packages
- [[https://github.com/trevorld/r-argparse][r-argparse]] or [[https://github.com/trevorld/r-optparse][r-optparse]]
  - Just like Python argparse library, which is used to add diverse
    arguments for a R script. Commenly used when the R script needs
    extra parameters/arguments.

- [[https://github.com/rticulate/import/][import]]
  - Like Python import mechanism, this packages allows us to load
    specific R function from a package or a script. Currently, I use
    =::= or =box= package more often than this.
- [[https://github.com/r-lib/here/][here]]
  - It is used to locate the project root path. It's a good habit to
    use it in R scripts since we don't need to specify the 
    workspace directory specifically. This increases the robust of our
    codes. Another similar package named [[https://github.com/r-lib/rprojroot/][rprojroot]].

- [[https://github.com/rstudio/renv/][renv]]
  - Create reproducible environment for each project by creating an
    independent programming environment like conda.

- [[https://github.com/r-lib/withr/][withr]]
  - Allow us to temporarily change the global states.

** Materials
- [[https://adv-r.hadley.nz][Advanced R]] by Hadley Wickham.
  - It's free and updated online. This book is written very well, and
    covers lots of important and advanced topics in R. I learn a lot
    about the concept of R enviroments and the object-oriented
    programming, like S3, S4, and R6.
    
- [[https://adv-r.hadley.nz][R Packages]] by Hdley Wickham.
  - It's free and updated online. This is the one for writing R packages.
